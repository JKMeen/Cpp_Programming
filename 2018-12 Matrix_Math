#include <iostream>

using namespace std;

typedef struct MATRIX4 {
	union { // 공동체
		struct {
			float _11, _12, _13, _14;
			float _21, _22, _23, _24;
			float _31, _32, _33, _34;
			float _41, _42, _43, _44;
		};
		float Mat[4][4]; // struct와 메모리 공간 연동
	};
};

// 제로 행렬 초기화
void CalcInitZero(MATRIX4* pM) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			pM->Mat[i][j] = 0.f;
		}
	}
}

// 항등 행렬 초기화
void CalcInitI(MATRIX4* pM) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (i == j)
				pM->Mat[i][j] = 1.f;
			else
				pM->Mat[i][j] = 0.f;
		}
	}
}

// 전치 행렬
MATRIX4 CalcMatTransposed(MATRIX4* pM) {
	MATRIX4 MA = *pM;
	MATRIX4 Mtmp;

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (i == j) Mtmp.Mat[i][j] = MA.Mat[i][j];
			else Mtmp.Mat[i][j] = MA.Mat[j][i];
		}
	}

	return Mtmp;
}

// 행렬 1개 출력
void OutMat(MATRIX4* pM) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (pM->Mat[i][j] == -0 || (pM->Mat[i][j] > -0.00001f && pM->Mat[i][j] < 0.00001f)) pM->Mat[i][j] = 0;
			cout << "[";
			cout.width(4);
			cout << fixed;
			cout.precision(2);
			cout << pM->Mat[i][j];
			cout << "] ";
		}
		cout << endl;
	}
}

// 행렬 2개 출력
void OutMat(MATRIX4* pM1, MATRIX4* pM2) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (pM1->Mat[i][j] == -0) pM1->Mat[i][j] = 0;
			if (pM1->Mat[i][j] > -0.00001f && pM1->Mat[i][j] < 0.00001f) pM1->Mat[i][j] = 0;
			cout << "[";
			//cout << fixed;
			cout.width(5);
			cout.precision(2);
			cout << pM1->Mat[i][j];
			cout << "] ";
		}
		cout << "  |  ";
		for (int j = 0; j < 4; j++) {
			if (pM2->Mat[i][j] == -0) pM2->Mat[i][j] = 0;
			if (pM2->Mat[i][j] > -0.00001f && pM2->Mat[i][j] < 0.00001f) pM2->Mat[i][j] = 0;
			cout << "[";
			//cout << fixed;
			cout.width(5);
			cout.precision(2);
			cout << pM2->Mat[i][j];
			cout << "] ";
		}
		cout << endl;
	}
}

// 행렬 X 숫자 곱셈
void CalcMatMul(MATRIX4* pM, float fX) {
	MATRIX4 MA = *pM;
	int tmp = fX;
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			MA.Mat[i][j] *= tmp;
		}
	}
	pM = &MA;
}

// 행렬 X 행렬
void CalcMatMul(MATRIX4* pM1, MATRIX4* pM2) {
	MATRIX4 tmp;
	CalcInitZero(&tmp);

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			cout << "(";
			for (int k = 0; k < 4; k++) {
				tmp.Mat[i][j] += pM1->Mat[i][k] * pM2->Mat[k][j];
				cout << pM1->Mat[i][k] << "*" << pM2->Mat[k][j];
				if (k != 3) cout << " + ";
			}
			cout << ") ";
		}
		cout << endl;
	}
	*pM1 = tmp;
}

// 가우스-요르단 소거법
// 첨가 행렬 (Augmented Matrix)
// <규칙>
// 1. 두 행을 교환
// 2. 한 행에 0이 아닌 상수를 곱함
// 3. 항 행의 배수를 다른 행에 더함 :: 행 줄 전체에 n을 곱하고 이것을 다른 행에 추가
void CalcMatGaussJordan(MATRIX4* pM1) {
	MATRIX4 MA = *pM1;
	MATRIX4 MI;
	CalcInitI(&MI);

	cout << "::::::::::::::::::::::::::::::" << endl;
	cout << ":::::::::: 시작행렬 ::::::::::" << endl;
	cout << "::::::::::::::::::::::::::::::" << endl << endl;
	cout << "<< MA >>, << MI >>" << endl;
	OutMat(&MA, &MI);
	cout << endl << endl;


	// 가우스
	cout << "::::::::::::::::::::::::::::::" << endl;
	cout << ":::::::::::가우스::::::::::::" << endl;
	cout << "::::::::::::::::::::::::::::::" << endl << endl;
	for (int j = 0; j < 4; j++) {
		for (int i = j; i < 4; i++) {
			cout << "[" << i << "][" << j << "] :: ";

			// 대각선 일 경우
			if (i == j) {
				cout << "<대각선 일 경우>" << endl;

				if (MA.Mat[i][j] == 1) { cout << "<패스>" << endl; }
				else {
					// 1. 두 행을 교환
					if (MA.Mat[j][j] == 0) {
						for (int k = 3; k > j; k--) {
							// 다음 행에 1 또는 -1이 있을 경우 스왑
							if (MA.Mat[k][j] != 0) {
								cout << "<" << k << "번째 행 0이 아닐 경우 스왑, 1로 만들기>" << endl;
								float tmpI[4];
								float tmpA[4];
								float tmp = MA.Mat[k][j];
								for (int l = 0; l < 4; l++) {
									tmpA[l] = MA.Mat[k][l];
									MA.Mat[k][l] = MA.Mat[i][l];
									MA.Mat[i][l] = tmpA[l] / tmp;

									tmpI[l] = MI.Mat[k][l];
									MI.Mat[k][l] = MI.Mat[i][l];
									MI.Mat[i][l] = tmpI[l] / tmp;
								}
								break;
							}
						}
					}

					// n으로 나누기
					else {
						cout << "<n으로 나누기>" << endl;
						float tmp = MA.Mat[j][j];
						for (int k = 3; k >= 0; k--) {
							MA.Mat[i][k] /= tmp;
							MI.Mat[i][k] /= tmp;
						}
					}
				}
			}

			// 대각선이 아닐 경우
			else {
				cout << "<대각선이 아닐 경우>" << endl;
				if (MA.Mat[i][j] == 0) { cout << "<패스>" << endl; }
				else {
					for (int k = j; k < 4; k++) {
						if (i != k) {
							if (MA.Mat[i][j] + MA.Mat[k][j] == 0) {
								cout << "<" << k << "번째 행 더하기>" << endl;
								for (int l = 0; l < 4; l++) {
									MA.Mat[i][l] += MA.Mat[k][l];
									MI.Mat[i][l] += MI.Mat[k][l];
								}
								break;
							}
							else if (MA.Mat[i][j] - MA.Mat[k][j] == 0) {
								cout << "<" << k << "번째 행 빼기>" << endl;
								for (int l = 0; l < 4; l++) {
									MA.Mat[i][l] -= MA.Mat[k][l];
									MI.Mat[i][l] -= MI.Mat[k][l];
								}
								break;
							}
						}
					}
					// 위에서 해결 못한 경우
					if (MA.Mat[i][j] != 0) {
						for (int k = j; k < 4; k++) {
							if (i != k) {
								cout << "j = " << j << endl;
								float tmp = MA.Mat[i][j];
								//if (MA.Mat[i][i] - (tmp * MA.Mat[k][i]) != 0) {
									cout << "<" << k << "번째 행, " << tmp << " 곱하고 빼기>" << endl;
									for (int l = 0; l < 4; l++) {
										MA.Mat[i][l] -= (tmp * MA.Mat[k][l]);
										MI.Mat[i][l] -= (tmp * MI.Mat[k][l]);
									}
									break;
								//}
							}
						}
					}
				}
			}
			cout << "<< MA >>, << MI >>" << endl;
			OutMat(&MA, &MI);
			cout << endl << endl;
		}
	}


	// 요르단
	cout << "::::::::::::::::::::::::::::::" << endl;
	cout << "::::::::::: 요르단 :::::::::::" << endl;
	cout << "::::::::::::::::::::::::::::::" << endl << endl;
	for (int j = 3; j >= 1; j--) {
		for (int i = j-1; i >= 0; i--) {
			cout << "[" << i << "][" << j << "] :: ";
			cout << "<대각선이 아닐 경우>" << endl;
			if (MA.Mat[i][j] == 0) { cout << "<패스>" << endl; }
			else {
				for (int k = j; k < 4; k++) {
					if (i != k) {
						if (MA.Mat[i][j] + MA.Mat[k][j] == 0) {
							cout << "<" << k << "번째 행 더하기>" << endl;
							for (int l = 0; l < 4; l++) {
								MA.Mat[i][l] += MA.Mat[k][l];
								MI.Mat[i][l] += MI.Mat[k][l];
							}
							break;
						}
						else if (MA.Mat[i][j] - MA.Mat[k][j] == 0) {
							cout << "<" << k << "번째 행 빼기>" << endl;
							for (int l = 0; l < 4; l++) {
								MA.Mat[i][l] -= MA.Mat[k][l];
								MI.Mat[i][l] -= MI.Mat[k][l];
							}
							break;
						}
					}
				}
				// 위에서 해결 못한 경우
				if (MA.Mat[i][j] != 0) {
					for (int k = j; k < 4; k++) {
						if (i != k) {
							cout << "j = " << j << endl;
							float tmp = MA.Mat[i][j];
							cout << "<" << k << "번째 행, " << tmp << " 곱하고 빼기>" << endl;
							for (int l = 0; l < 4; l++) {
								MA.Mat[i][l] -= (tmp * MA.Mat[k][l]);
								MI.Mat[i][l] -= (tmp * MI.Mat[k][l]);
							}
							break;
						}
					}
				}
			}
			cout << "<< MA >>, << MI >>" << endl;
			OutMat(&MA, &MI);
			cout << endl << endl;
		}
	}

	cout << "::::::::::::::::::::::::::::::" << endl;
	cout << ":::::::::::: 결과 ::::::::::::" << endl;
	cout << "::::::::::::::::::::::::::::::" << endl << endl;
	OutMat(&MA, &MI);
}



// 사루스 공식을 이용한 행렬식
// 수반 행렬 전 행렬식 (Augmented Matrix)
//
// det == 0, 역행렬 존재하지 않는다
// det > 0, 도형의 방향이 보존된다.
// det < 0, 도형의 방향이 보존되지 않는다.
// det는 선형변환의 스케일 성분을 나타내는 값이다.
//
// P' = AP :: 도형 P가 선형변환 A에 의해 P'로 변환되었을 경우
// 면적(P') = |det(A)| X 면적(P) :: 2D의 경우
// 부피(P') = |det(A)| X 부피(P) :: 3D의 경우
float CalcMatSarrus(MATRIX4* pM) {
	MATRIX4 MA = *pM;

	// 4X4 행렬 => 3X3 행렬로 간소화
	// [0],[0] => 1로 만들기
	cout << "::::::::::::::::::::::::::::::::::::::::::::::::::" << endl;
	cout << ":::::::::: 4X4 행렬 => 3X3 행렬로 간소화 :::::::::" << endl;
	cout << "::::::::::::::::::::::::::::::::::::::::::::::::::" << endl;
	if (MA.Mat[0][0] != 1) {
		bool blsTrue = false;
		for (int i = 1; i < 4; i++) {
			if (MA.Mat[i][0] == 1) {
				float Mtmp[4];
				for (int j = 0; j < 4; j++) {
					Mtmp[j] = MA.Mat[i][j];
					MA.Mat[i][j] = MA.Mat[0][j];
					MA.Mat[0][j] = Mtmp[j];
				}
				blsTrue = true;
				break;
			}
		}

		if (!blsTrue) {
			float tmp0 = MA.Mat[0][0];
			for (int j = 0; j < 4; j++) {
				MA.Mat[0][j] /= tmp0;
			}
		}
	}
	OutMat(&MA);


	// [0],[1]~[0],[3] => 0으로 만들기
	cout << endl << "::::::::::::::::::::::::::::::::::::::::::::::::::" << endl;
	cout << ":::::::::::::::: 0,n 0으로 만들기 ::::::::::::::::" << endl;
	cout << "::::::::::::::::::::::::::::::::::::::::::::::::::" << endl;
	for (int i = 1; i < 4; i++) {
		if (MA.Mat[i][0] != 0) {
			float ftmp = MA.Mat[i][0];
			for (int j = 0; j < 4; j++) {
				MA.Mat[i][j] -= MA.Mat[0][j] * ftmp;
			}
		}
	}
	OutMat(&MA);


	// 사루스(새러스) 공식
	cout << endl << "::::::::::::::::::::::::::::::::::::::::::::::::::" << endl;
	cout << "::::::::::::::::::: 사루스 공식 ::::::::::::::::::" << endl;
	cout << "::::::::::::::::::::::::::::::::::::::::::::::::::" << endl;

	int jcount = 1;
	int jcount2 = 1;
	float save = 0.f;
	/*save +=	+ MA.Mat[1][1] * MA.Mat[2][2] * MA.Mat[3][3]
	+ MA.Mat[1][2] * MA.Mat[2][3] * MA.Mat[3][1]
	+ MA.Mat[1][3] * MA.Mat[2][1] * MA.Mat[3][2]
	- MA.Mat[1][1] * MA.Mat[2][3] * MA.Mat[3][2]
	- MA.Mat[1][2] * MA.Mat[2][1] * MA.Mat[3][3]
	- MA.Mat[1][3] * MA.Mat[2][2] * MA.Mat[3][1];
	*/

	// 표시
	for (int k = 1; k < 4; k++) {
		// < + > 
		if (k != 1) cout << " + ";
		else cout << "   ";
		cout << "(";
		for (int i = 1; i < 4; i++) {
			cout << "[" << i << "][" << jcount << "]";
			if (i != 3) cout << " * ";

			jcount++;
			if (jcount > 3) jcount = 1;
		}
		jcount++;
		if (jcount > 3) jcount = 1;

		cout << ")" << endl;

		//////////////////////////////////
		// < - > 
		cout << " - (";
		for (int i = 1; i < 4; i++) {
			cout << "[" << i << "][" << jcount2 << "]";
			if (i != 3) cout << " * ";

			jcount2--;
			if (jcount2 < 1) jcount2 = 3;
		}
		jcount2--;
		if (jcount2 < 1) jcount2 = 3;

		cout << ")" << endl;
	}
	cout << endl << "             =             " << endl << endl;


	// 공식
	jcount = 1;
	jcount2 = 1;
	for (int k = 1; k < 4; k++) {
		// < + > 
		float tmpD = 1;
		if (k != 1) cout << " + ";
		else cout << "   ";
		cout << "(";
		for (int i = 1; i < 4; i++) {
			tmpD *= MA.Mat[i][jcount];
			cout << MA.Mat[i][jcount];
			if (i != 3) cout << " * ";

			jcount++;
			if (jcount > 3) jcount = 1;
		}
		jcount++;
		if (jcount > 3) jcount = 1;
		save += tmpD;

		cout << ")" << endl;

		//////////////////////////////////
		// < - > 
		tmpD = 1;
		cout << " - (";
		for (int i = 1; i < 4; i++) {
			tmpD *= MA.Mat[i][jcount2];
			cout << MA.Mat[i][jcount2];
			if (i != 3) cout << " * ";

			jcount2--;
			if (jcount2 < 1) jcount2 = 3;
		}
		jcount2--;
		if (jcount2 < 1) jcount2 = 3;
		save -= tmpD;

		cout << ")" << endl;
	}

	cout << endl << "             =             " << endl << endl;
	cout << "행렬식 :: " << save << endl << endl;
	cout << endl << "::::::::::::::::::::::::::::::::::::::::::::::::::" << endl;

	return save;
}



// 수반행렬로 역행렬 구하기
// 수반 행렬 (Adjugate Matrix)
// A X adj(A) = adj(A) X A = det(A) * I
// adj(A) X A = det(A) * I
// adj(A) X A X A-1 = det(A) * I X A-1
// adj(A) = det(A) * A-1
// A-1 = 1/det(A) * adj(A)
MATRIX4 CalcMatSuban(MATRIX4 *pM) {
	MATRIX4 MA;
	MA = CalcMatTransposed(pM);
	MATRIX4 Mtmp;
	CalcInitZero(&Mtmp);

	float Def = CalcMatSarrus(pM);

	float save;
	cout << "<< MA >>" << endl;
	for (int k = 0; k < 4; k++) {
		for (int l = 0; l < 4; l++) {
			save = 0;
			cout << "[" << k +1<< "][" << l+1 << "] = " << endl;
			
			// 공식
			int jcount = l + 1;  if (jcount > 3) jcount = 0;
			int jcount2 = l - 1; 
			if (jcount2 < 0) {
				if (l == 3) jcount2 = 2;
				else jcount2 = 3;
			}
			for (int n = 0; n < 3; n++) {
				// < + > 
				float tmpD = 1;
				int sign;
				if (((k+1) + (l+1)) % 2 == 0) sign = 1;
				else sign = -1;

				if (sign == 1) cout << " + (";
				else  cout << " - (";
				for (int i = 0; i < 4; i++) {
					if (i != k) {
						tmpD *= MA.Mat[i][jcount];
						cout << "[" << i+1 << "][" << jcount+1 << "]";
						if (k == 3) { if (i != 2) cout << " * "; }
						else { if (i != 3) cout << " * "; }

						jcount++;
						if (jcount == l) jcount++;
						if (jcount > 3) {
							if (l == 0) jcount = 1;
							else jcount = 0;
						}
					}
				}
				jcount++;
				if (jcount == l) jcount++;
				if (jcount > 3) {
					if (l == 0) jcount = 1;
					else jcount = 0;
				}

				save += tmpD * sign;
				cout << " = " << tmpD << " )";
				if (-sign == 1) cout << " + (";
				else  cout << " - (";
				//////////////////////////////////
				// < - > 
				tmpD = 1;
				for (int i = 0; i < 4; i++) {
					if (i != k) {
						tmpD *= MA.Mat[i][jcount2];
						cout << "[" << i+1 << "][" << jcount2+1 << "]";
						if (k == 3) { if (i != 2) cout << " * "; }
						else { if (i != 3) cout << " * "; }
						jcount2--;
						if (jcount2 == l) jcount2--;
						if (jcount2 < 0 || (l == 0 && jcount2 < l)) {
							if (l != 3) jcount2 = 3;
							else jcount2 = 2;
						}
					}
				}
				jcount2--;
				if (jcount2 == l) jcount2--;
				if (jcount2 < 0 || (l == 0 && jcount2 < l)) {
					if (l != 3) jcount2 = 3;
					else jcount2 = 2;
				}
				save -= tmpD * sign;
				cout << " = " << tmpD << " )" << endl;
			}

			Mtmp.Mat[k][l] = save;
			cout << " = " << Mtmp.Mat[k][l];
			Mtmp.Mat[k][l] /= Def;
			cout << " / " << Def << " = " << Mtmp.Mat[k][l] << endl;
			OutMat(&MA, &Mtmp);
			cout << endl << endl;
		}
	}

	return Mtmp;
}

void main() {
	MATRIX4 M1 = {
		1, 0, 3, 7,
		4, 2, 0, 1,
		7, 7, 3, 0,
		5, 0, 6, 8,
	};

	/*MATRIX4 M1 = {
		1, 1, 1, -1,
		1, 1, -1, 1,
		1, -1, 1, 1,
		-1, 1, 1, 1,
	};*/

	/*MATRIX4 M1 = {
		1, 1, 2, 1,
		2, 1, 1, 1,
		1, 2, 2, 1,
		4, 3, 1, 2,
	};*/

	//CalcMatGaussJordan(&M1);	// 가우스 요르단 역행렬
	CalcMatSuban(&M1);			// 수반행렬 역행렬

}
